import mongoose from 'mongoose'
import Recipe from '@app/model/Recipe';
import Order, {OrderType} from '@app/model/Order'
import Stock from '@app/model/Stock'
import {getRandomInt} from '@app/utils/utils'
import {IOrderDetail, OrderDetailType} from '@app/model/OrderDetail'

export class OrderService {
    constructor() {
    }

    public static async updateStock (orderDetailId: string) {
        let stockCard = [];
        let order = await Order.findOne({
            'details._id': orderDetailId
        }).activeOne();
        for (const detail of order.details) {
            if (detail._id == orderDetailId) {
                const recipe = await Recipe.findById(detail.recipe).activeOne();
                if (!recipe) {
                    continue;
                }
                for (const recipeDetail of recipe.details) {
                    const totalQty = detail.qty * recipeDetail.qty;
                    const stock = new Stock({
                        product: recipeDetail.product,
                        qty: totalQty * -1,
                        comment: `Generated by at prepare recipe`,
                    });
                    stockCard.push(stock);
                }
            }
        }
        await Stock.insertMany(stockCard);
    }

    public static async validateSupplies (orderDetailId: string) {
        let order = await Order.findOne({
            'details._id': orderDetailId
        }).activeOne();
        for (const detail of order.details) {
            if (detail._id == orderDetailId) {
                const recipe = await Recipe.findById(detail.recipe).activeOne();
                if (!recipe) {
                    return false;
                }
                for (const recipeDetail of recipe.details) {
                    const stocks = await Stock.find({product: recipeDetail.product}).actives();
                    let totalStock = 0;
                    for (const stock of stocks) {
                        totalStock += stock.qty;
                    }
                    if ((recipeDetail.qty * detail.qty) > totalStock) {
                        return false;
                    }
                }
                break;
            }
        }
        return true;
    }

    public static async generateRandomOrder(table: string, qty: number) {
        const recipes = await Recipe.find().actives();
        if (recipes.length === 0) {
            return null;
        }
        let order = new Order({
            _id: new mongoose.Types.ObjectId(),
            table: table,
            status: OrderType.PENDING,
            startDate: Date.now(),
        });
        let details = [];
        for (let i = 0; i < qty; i++) {
            const randomIndex = getRandomInt(0, recipes.length - 1);
            const randomRecipe = recipes[randomIndex];
            details.push({
                recipe: randomRecipe._id,
                status: OrderDetailType.PENDING,
                qty: 1,
            });
        }
        order.details = details as [IOrderDetail];
        await order.save();
        return order;
    }

}